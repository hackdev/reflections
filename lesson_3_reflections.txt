When would you want to use a remote repository rather than keeping all your work local?
You would want to use a remote repository to have a cloud-based workspace reachable from anywhere even when you do not have access to your development machine.
You would want a remote repository as a backup to your local repository.
You would also want to use a remote repository when working on a group project or to make it easy to share your work with others.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
To excercise control over what is pulled. This may not be as important when you are working alone, but with a group project you may wish to review the changes before making them.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are clones that are local to GitHub-- GitHub makes a clone using its own computers, it also tracks the number of times a repository has been forked and links the forks to the original repository
Clones are copies of repository including commit history. A forked repository needs to be cloned for use on local machine.
Branches are versions of repository created to enable development of several versions simultaneously and allowing branching in different directions. Branches can be merged to incorporate features from one branch into another.

What is the benefit of having a copy of the last known state of the remote stored locally?
This enables you to track changes between your local version and the remote and review them before deciding whether to incorporate them.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could exchange files or snippets of code, but version control makes it much easier to see and track changes.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Any time you want to do a pull request, you need to create a separate branch, so the changes are easy to see.
You would also want to do separate branches if you wanted to try out several versions or features that may not be compatible and want to preserve a working demo on the master branch.
The workflow is more complex, but the benefits are there, since you are able to grow each branch independently.