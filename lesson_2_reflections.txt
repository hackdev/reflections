What happens when you initialize a repository? Why do you need to do it?

A hidden .git folder is created to keep track of changes
You need to do it to be able to take snapshots of your directory contents each time you make a commit
Repository enables you to log changes to files within the directory and checkout previous versions of the directory contents at the time of each commit

How is the staging area different from the working directory and the repository? What value do you think it offers?

It is different from the working directory in that you do not have to include entire working directory
It is different from the repository in that it defines what will be included in the commit
Staging area allows you to single out certain file(s) for inclusion into commit

How can you use the staging area to make sure you have one commit per logical change?
You can use git diff to see the changes between working directory and staging area
You can use git diff --staged to show the changes between staging area and the most recent commit
You can use git reset --hard  to discard any changes in the working directory and the staging area


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be helpful when creating several versions of the project or experimenting with changes while still wanting to have a working demo.
Branches allow developing the application several ways and still having the option to switch between versions.

How do the diagrams help you visualize the branch structure?
Diagrams help understand the relationship between commits and their places within respective branches

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
single resulting branch incorporating the code and commits from both

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
automatic merging saves time when there is no ambiguity